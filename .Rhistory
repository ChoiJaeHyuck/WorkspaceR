v
v[-2] <- 100
v
v[1,3,5]
#벡터간 연산
#
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
# 벡터에 적용가능한함수
v <- c(1:10)
sum(v)
sum(2*v)
mean(v)
mean(v[1:5])
median(v)
median(v[1:5])
max(v)
min(v)
sort(v)
sort(v,decreasing = FALSE)
sort(v,decreasing = TRUE)
range(v)
var(v)
sd(v)
avg <- sum(v) / length(v)
avg
number1 <- 10
number2 <- 19
number3 <- 3
number1 > number2
number1 <= number2
(number1 > number2) && (number1 > number2)
(number1 > number2) || (number1 > number2)
number1 <- 10
number2 <- 19
number3 <- 3
number1 > number2
number1 <= number2
(number1 > number2) && (number1 > number3)
(number1 > number2) || (number1 > number3)
# 관계 연산자를 벡터에 적용
v <- 1:10
v>=5
v[v>5]
sum(v>5)
v=5
condition <- v>5&v<8
condition
v[condition]
v <- 1:10
v>=5
v[v>5]
sum(v>5)
v=5
condition <- v>5&v<8
condition
v[condition]
favorite <- c('winter','summer','spring',
'summer','summer','fall'
'fall','summer','spring','spring')
favorite
favorite <- c('winter','summer','spring',
'summer','summer','fall',
'fall','summer','spring','spring')
favorite
class(favorite)
str(favoreit)
dim(favorite)
class(favorite)
str(favorite)
dim(favorite)
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
for ( i in 1:10 ) {
cat( i, ' ' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
multiple = 2
for ( i in 2:9 ) {
cat( multiple, ' * ', i , ' = ', multiple * i, '\n' )
}
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
#
# 2.3 반복구조
#
# 반복구조 : 조건이 만족하는동안 동일한 내용을 반복 수행
#
#   1. 반복 횟수가 정해진 경우 : for
#   2. 반복 횟수가 정해지지 않은 경우 : while
#
#   for문 : for( [반복제어변수] in [반복범위] ) { }
#
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
print( '*' )
}
for ( i in 1:10 ) {
cat( i, ' ' )
}
multiple = 2
for ( i in 2:9 ) {
cat( multiple, ' * ', i , ' = ', multiple * i, '\n' )
}
for ( i in 2:9 ) {
for ( j in 1:9 ) {
multiple = i * j
cat( multiple, '\t' )
}
}
local <- unique( df[ , 1 ] )
local
# 3. 시도 이름 분리
local <- unique( df[ , 1 ] )
for ( i in 1:10 ) {
print( '*' )
}
for ( s in 1:10 ) {
print( '*' )
}
x <- iris
x[1,2] <- NA
x[1,3] <- NA
x[2,3] <- NA
x[3,4] <- NA
head(x)
for (i in 1:ncol(x)){
this.na <- is.na(x[i])
cat(colnames(x)[i],"\t",sum(this.na),"\n")
}
col_na <- function(y){
return(sum(is.na(y)))
}
na.count <- apply(x,2,FUN = col_na)
na.count
x <- iris                            # iris데이터 프레임에 결측치 강제로 투입
x[1,2] <- NA
x[1,3] <- NA
x[2,3] <- NA
x[3,4] <- NA
head(x)
col_na <- function(y){
return(sum(is.na(y)))
}
na.count <- apply(x,2,col_na)
na.count
rowsums(is.na(x))
sum(rowSums(is.na(x))>0)
sum(is.na(x))
rowSums(is.na(x))
sum(rowSums(is.na(x))>0)
sum(is.na(x))
install.packages("mice")
library(mice)
mean(is.na(x))
mean(is.na(iris))
result <- md.pattern(x)
result
md.pattern(x)
md.pattern(x)
result
write.csv( result,"md_iris.csv",row.names = T)
write.csv( result,"md_iris.csv",row.names = T)
write.csv( result,"md_iris.csv",row.names = T)
md.pattern(iris)
write.csv(result,"md_iris.csv",row.names = T)
write.csv(result,"md_iris.csv", row.names = T)
write.csv(result,"md_iris.csv", row.names = T )
result.cor <- as.data.frame(abs(is.na(x)))
result.cor
result.cor.final <- result.cor[which(apply(result.cor,2,sum)>0)]
result.cor.final
cor(result.cor.final)
setwd(C:\\Workspace\\WorkspaceR)
setwd(C:\Workspace\WorkspaceR)
setwd("C:\\Workspace\\WorkspaceR")
write.csv(result,"md_iris.csv", row.names = T )
write.csv( result, "md_iris.csv", row.names = T )
setwd("C:\\Workspace\\WorkspaceR")
write.csv(result,"md_iris.csv", row.names = T )
result.cor.full <- cor(result.cor ,result.cor.final, use="pairwise.complete.obs")
result.cor.full
result.cor.full <- cor(result.cor ,result.cor.final, use="pairwise.complete.obs")
result.cor.full <- cor(result.cor ,
result.cor.final,
use="pairwise.complete.obs")
result.cor.full
result.cor.full <- cor(result.cor,
result.cor.final,
use="pairwise.complete.obs")
head(x)
x[!complete.cases(x),]
y <- x[complete.cases(x),]
head(y)
result.cor.full <- cor(result.cor,
result.cor.final,
use="pairwise.complete.obs")
result.cor.full <- cor(result.cor,
result.cor.final,
use="pairwise.complete.obs")
result.cor.full
st <- data.frame(state.x77)
boxplot(st$Income)
boxplot.stats(st$Income)$out
ut.val <- boxplot.stats(st$Income)$out
st$Income[st$Income %in% out.val] <- NA
head(st)
newdata <- st[complete.cases(st),]
head(mewdata)
out.val <- boxplot.stats(st$Income)$out
st$Income[st$Income %in% out.val] <- NA
head(st)
newdata <- st[complete.cases(st),]
head(newdata)
v1 <- c(1,7,6,8,4,2,3)
order(v1)
v1 <- sort(v1)
v1
v2 <- sort(v1,decreasing = T)
v2
head(iris)
order(iris$Sepal.Length)
iris[order(iris$Sepal.Length),]
iris[order(iris$Sepal.Length,decreasing = T),]
iris.new <- iris(order(iris$Sepal.Length),)
head(iris.new)
iris[order(iris$Sepal.Length,decreasing = T,iris$Petal.Length),]
head(iris)
order(iris$Sepal.Length)
iris[order(iris$Sepal.Length),]
iris[order(iris$Sepal.Length,decreasing = T),]
iris.new <- iris(order(iris$Sepal.Length),)
iris.new <- iris(order(iris$Sepal.Length),)
# 매트릭스와 데이터프레임 정렬 : 특정 열의 값을 기준으로 행들을 재배열하는 형태로 정렬
iris
iris.new <- iris(order(iris$Sepal.Length),)
iris.new <- iris(order(iris$Sepal.Length),)
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length), ]
iris[ order( iris$Sepal.Length, decreasing = T ), ]
iris.new <- iris( order( iris$Sepal.Length), )
head( iris.new )
iris[ order( iris$Sepal.Length, decreasing =  T, iris$Petal.Length ), ]
head(iris)
order(iris$Sepal.Length)
iris[order(iris$Sepal.Length),]
iris[order(iris$Sepal.Length,decreasing = T),]
iris.new <- iris(order(iris$Sepal.Length), )
head(iris.new)
iris[order(iris$Sepal.Length,decreasing = T,iris$Petal.Length),]
head( iris )
order( iris$Sepal.Length )
iris[ order( iris$Sepal.Length), ]
iris[ order( iris$Sepal.Length, decreasing = T ), ]
iris.new <- iris( order( iris$Sepal.Length), )
head( iris.new )
iris[ order( iris$Sepal.Length, decreasing =  T, iris$Petal.Length ), ]
sp <- split(iris,iris$Species)
sp
summary(sp)
sp$setosa
subset(iris,Species=='setosa')
subset(iris,Sepal.Length > 7.5)
subset(iris,Sepal.Length> 5.1 & Sepal.Width > 3.9)
subset(iris, Sepal.Length > 7.6, select = c(Petal.Length,Petal.Width))
x <- 1:100
y <- sample(x,size=10, replace = FALSE)
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
x <- 1:100
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
y <- sample(x,size=10, replace = FALSE)     # size : 추출한 값, replae = 비복원 추출
y
idx <- sample(1:nrow(iris),size = 50, replace = FALSE)
idx.50 <- iris[idx,]
dim(idx.50)
head(idx.50)
sample(1:20, size = 5)
sample(1:20, size = 5)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
set.seed(100)
sample(1:20, size = 5)
combn(1:5,3) # 1~5까지 중에서 3개씩 짝지어라
x = c("red","green","blue","black","white")
com <- combn(x,2)
com
for(i in 1:ncol(com)){
cat(com[,i],"\n")
}
agg <- aggregate(iris[,-5],by = list(iris$Species),mean)
agg
agg <- aggregate(iris[,-5],by = list(품종 = iris$Species),mean)
agg
agg <- aggregate(iris[,-5],by = list(표준편차 = iris$Species),sd)
agg
x <- data.frame(name = c('a','b','c'),math = c(90,80,40))
y <- data.frame(name = c('a','b','d'),korean = c(75,60,90))
x
y
#               병합기준
z <- merge(x,y,by = c('name'))
z
z2 <- merge(x,y)
z2
merge(x,y,all.x = T)
merge(x,y,all.y = T)
merge(x,y,all = T)
