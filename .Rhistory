str(vector_tc)
vector_tc
vector7 <- seq(1,101,3)
vector8 <- seq(0.1,1.0,0.1)
vector9 <- req(1, times=5)
vector10 <- req(1:5,times=3)
vector11 <- req(c(1,5,9),times=3)
vector7 <- seq(1,101,3)
vector8 <- seq(0.1,1.0,0.1)
vector9 <- rep(1, times=5)
vector10 <- rep(1:5,times=3)
vector11 <- rep(c(1,5,9),times=3)
vector7 <- seq(1,101,3)
vector8 <- seq(0.1,1.0,0.1)
vector9 <- rep(1, times=5)
vector10 <- rep(1:5,times=3)
vector11 <- rep(c(1,5,9),times=3)
vector7
vector8
vector9
vector10
vector11
# 벡터 원소값에 이른 지정
#
score <- c(90,85,70)
score
names(score)
names(score) <- c('hong','kim','lee')
names(score)
score
length(score)
#
# 벡터 요소 읽기
score[1]
score['kim']
score[2]
# 벡터 요소 쓰기
score
score[1] <- 55
score
score['lee'] <- 77
score
#벡터 요소 한 번에 여러개 읽기
#
v <- c(1,4,3,7,8)
v[c(1,3,5)]
v[1:3]
v[seq(1,5,2)]
v[-2]
v[-c(3:5)]
v[c(1,3,5)] <- 5
v
v[-2] <- 100
v
v[1,3,5]
#벡터간 연산
#
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
# 벡터에 적용가능한함수
v <- c(1:10)
sum(v)
sum(2*v)
mean(v)
mean(v[1:5])
median(v)
median(v[1:5])
max(v)
min(v)
sort(v)
sort(v,decreasing = FALSE)
sort(v,decreasing = TRUE)
range(v)
var(v)
sd(v)
avg <- sum(v) / length(v)
avg
number1 <- 10
number2 <- 19
number3 <- 3
number1 > number2
number1 <= number2
(number1 > number2) && (number1 > number2)
(number1 > number2) || (number1 > number2)
number1 <- 10
number2 <- 19
number3 <- 3
number1 > number2
number1 <= number2
(number1 > number2) && (number1 > number3)
(number1 > number2) || (number1 > number3)
# 관계 연산자를 벡터에 적용
v <- 1:10
v>=5
v[v>5]
sum(v>5)
v=5
condition <- v>5&v<8
condition
v[condition]
v <- 1:10
v>=5
v[v>5]
sum(v>5)
v=5
condition <- v>5&v<8
condition
v[condition]
favorite <- c('winter','summer','spring',
'summer','summer','fall'
'fall','summer','spring','spring')
favorite
favorite <- c('winter','summer','spring',
'summer','summer','fall',
'fall','summer','spring','spring')
favorite
class(favorite)
str(favoreit)
dim(favorite)
class(favorite)
str(favorite)
dim(favorite)
library(dplyr)
exam <- %>% arrange(korean)
exam %>% arrange(korean)
exam %>% arrange(desc(korean))
exam %>% arrange(class,desc(korean))
mtcars %>% filter(mpg, cyl) %>% arrange(cyl, desc(mpg)) %>% head()
exam <- read.csv('exam.csv',header = T)
setwd("C:\\Workspace\\WorkspaceR")
exam <- read.csv('exam.csv',header = T)
exam
exam %>% arrange(korean)
exam %>% arrange(desc(korean))
exam %>% arrange(class,desc(korean))
mtcars %>% filter(mpg, cyl) %>% arrange(cyl, desc(mpg)) %>% head()
mtcars %>% select(mpg, cyl) %>% arrange(cyl, desc(mpg)) %>% head()
mtcars %>% filter(mpg >= 15.0) %>% select(mpg, cyl)  %>% arrange(cyl, desc(mpg)) %>% head(15)
exam %>% mutate( total = korean + science ) %>% head
exam %>% mutate( total = korean + science , average = (korean + science ) / 2 ) %>% head
exam %>% mutate( grade = ifelse( science >= 60, 'pass','fail')) %>% head
# ifelse( science >= 60, 'pass', 'fail') : 삼항연산자
#              조건      참일때 거짓일때
#
exam %>% mutate( total = korean + science, average = (korean + science) / 2 )
exam %>% mutate( total = korean + average, average = ( korean + average) / 2 ) %>%
mutate( grade = ifelse( average >= 90, 'A', ifelse( average >= 80, 'B',
ifelse( average >= 70, 'C',
ifelse ( average >= 60, 'D','F'))))) %>% head
# ifelse( science >= 60, 'pass', 'fail') : 삼항연산자
#              조건      참일때 거짓일때
#
exam %>% mutate( total = korean + science, average = (korean + science) / 2 )
exam %>%
mutate( grade = ifelse( average >= 90, 'A', ifelse( average >= 80, 'B',
ifelse( average >= 70, 'C',
ifelse ( average >= 60, 'D','F'))))) %>% head
# ifelse( science >= 60, 'pass', 'fail') : 삼항연산자
#              조건      참일때 거짓일때
#
exam %>% mutate( total = korean + science, average = (korean + science) / 2 )
exam %>% mutate( grade = ifelse( average >= 90, 'A', ifelse( average >= 80, 'B',
ifelse( average >= 70, 'C',
ifelse ( average >= 60, 'D','F'))))) %>% head
# ifelse( science >= 60, 'pass', 'fail') : 삼항연산자
#              조건      참일때 거짓일때
#
exam <- exam %>% mutate( total = korean + science, average = (korean + science) / 2 )
exam %>% mutate( grade = ifelse( average >= 90, 'A', ifelse( average >= 80, 'B',
ifelse( average >= 70, 'C',
ifelse ( average >= 60, 'D','F'))))) %>% head
exam %>% summarise( mean_korean = mean(korean))
exam %>% group_by( class) %>%  summarise( mean_korean = mean(korean))
mtcars %>% group_by(cyl) %>% summarise(mean_mpg = mean(mpg))
exam %>% group_by( class ) %>% summarise( mean_korean = mean(korean),
mean_science = mean(science),
median_korean = median(korean),
median_science = median( science),
n = n())
mtcars %>% group_by(cyl, gear) %>% summarise( mean_mpg = mean(mpg)) %>% head
mtcars %>% group_by(cyl) %>% filter(gear == 4) %>% mutate( tot_wt = sum(wt)) %>%
summarise( mean_wt = mean(wt)) %>% arrange( desc( mean_wt))
mtcars %>% distinct( cyl)
mtcars %>% distinct( gear)
library( ggplot2 )
df <- data.frame( month, rain )
month <- c( 1, 2, 3, 4, 5,6 )
rain <- c( 55, 50, 45, 50, 60, 70 )
df <- data.frame( month, rain )
df
ggplot( df, aes( x = month, y = rain ) ) + geom_bar( stat = "identify", width = 0.7, fill = "steelbule" )
library( ggplot2 )
month <- c( 1, 2, 3, 4, 5,6 )
rain <- c( 55, 50, 45, 50, 60, 70 )
df <- data.frame( month, rain )
df
ggplot( df, aes( x = month, y = rain ) ) + geom_bar( stat = "identify", width = 0.7, fill = "steelbule" )
ggplot( df, aes( x = month, y = rain ) ) + geom_bar( stat = "identity", width = 0.7, fill = "steelbule" )
ggplot( df, aes( x = month, y = rain ) ) + geom_bar( stat = "identity", width = 0.7, fill = "steelblue" )
ggplot( df, aes( x = month, y = rain ) ) +  # dataset, x, y
geom_bar( stat = "identity",            # 막대 높이, y축 값
width = 0.7,                  # 막대 폭
fill = "skyblue" )          # 막대 색
ggplot( df, aes( x = month, y = rain ) ) +  # dataset, x, y
geom_bar( stat = "identity",            # 막대 높이, y축 값
width = 0.7,                  # 막대 폭
fill = "blackpink" )            # 막대 색
ggplot( df, aes( x = month, y = rain ) ) +  # dataset, x, y
geom_bar( stat = "identity",            # 막대 높이, y축 값
width = 0.7,                  # 막대 폭
fill = "emerald" )            # 막대 색
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "steelblue" ) +
ggtitle( " 월별 강수량" ) +
theme( Plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "steelblue" ) +
ggtitle( " 월별 강수량" ) +
theme( Plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "steelblue" ) +
ggtitle( "월별 강수량" ) +
theme( Plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "steelblue" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "dark brown" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "violet" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "ocean" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "pearl" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "emerald" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "emerald green" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "green" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "purple" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "dark red" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "dark Green" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "dark pink" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "dark Green" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "blue green" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( df, aes( x = month, y = rain ) ) +
geom_bar( stat = "identity",
width = 0.7,
fill = "BG" ) +
ggtitle( "월별 강수량" ) +
theme( plot.title = element_text( size =  25,
face = "bold",
colour = "steelblue")) +
labs( x = "월", y = "강수량" ) +
coord_flip()
ggplot( iris, aes( x = Sepal.Length,
fill = Species,
color = Species ) ) +
geom_histogram( binwidth = 0.5, position = "dodge" ) +
theme( legend.position = "top")
ggplot( iris, aes( x = Petal.Length ) ) +
geom_histogram( binwidth = 0.5 )
ggplot( iris, aes( x = Sepal.Length,
fill = Species,
color = Species ) ) +
geom_histogram( binwidth = 0.5, position = "dodge" ) +
theme( legend.position = "top")
ggplot( data = iris, aes( x = Petal.Length,
y = Petal.Width ) ) +
geom_point()
# 그룹으로 구분되는 산점도
ggplot( data = iris, aes( x = Petal.Length,
y = Petal.Width,
color = Species ) ) +
geom_point( size = 3 ) +
ggtitle( " 꽃잎의 길이와 폭" ) +
theme( plot.title = element_text( size = 25,
face = "bold",
colour = "bright yellow" ) )
# 그룹으로 구분되는 산점도
ggplot( data = iris, aes( x = Petal.Length,
y = Petal.Width,
color = Species ) ) +
geom_point( size = 3 ) +
ggtitle( " 꽃잎의 길이와 폭" ) +
theme( plot.title = element_text( size = 25,
face = "bold",
colour = "dark yellow" ) )
# 그룹으로 구분되는 산점도
ggplot( data = iris, aes( x = Petal.Length,
y = Petal.Width,
color = Species ) ) +
geom_point( size = 3 ) +
ggtitle( " 꽃잎의 길이와 폭" ) +
theme( plot.title = element_text( size = 25,
face = "bold",
colour = "dark blue" ) )
ggplot( iris, aes( y = Petal.Length ) ) +
geom_boxplot( fill = "orange")
# 그룹별 상자수염그래프
ggplot( iris, aes( y = Petal.Length, fill = Species ) ) +
geom_boxplot()
year <- 1937:1960
cnt <- as.vector( airmiles )
df <- data.frame( year, cnt )
head( df )
ggplot( df, aes( x = year, y = cnt ) ) +
geom_line( col = "blue" )
install.packages("corrplot")
library(corrplot)
m <- cor( mtcars )
m
corrplot(m, method = "number" )
corrplot(m, method = "color" )
corrplot(m, method = "pie" )
corrplot(m, method = "bar" )
corrplot(m, method = "triangle" )
corrplot(m, method = "squre" )
corrplot(m, method = "square" )
corrplot(m, method = "ellipse" )
corrplot(m, method = "shade" )
install.packages("treemap")
library(treemap)
data( GNI2014 )
str( GNI2014 )
data( GNI2014 )
str( GNI2014 )
treemap( GNI2014, index = c( " continent", "iso3" ),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels = "purple" )
library(treemap)
data( GNI2014 )
str( GNI2014 )
treemap( GNI2014, index = c( " continent", "iso3" ),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels = "purple" )
data( GNI2014 )
str( GNI2014 )
treemap( GNI2014, index = c( "continent", "iso3" ),
vSize = "population",
vColor = "GNI",
type = "value",
bg.labels = "purple" )
library( MASS)
library( MASS)
str( UScrime )
head( UScrime )
radius <- sqrt( UScrime$Pop )
symbols( UScrime$U2, UScrime$y,
circle = radius,
inches = 0.4,
fg = "white", bg = "lightgray",
lwd = 1.5,
xlab = "unemployment 35~39 miles",
ylab = "crime rate",
main = "UScrime Data" )
text( UScrime$U2, UScrime$y,
1:nrow( UScrime ),
cex = 0.8,
col = "brown" )
text( UScrime$U2, UScrime$y,                       # 문자출력 x, y위치
1:nrow( UScrime ),                           # 문자로 출력할 값
cex = 0.8,                                   # 글자 크기
col = "green" )                              # 글자색
text( UScrime$U2, UScrime$y,                       # 문자출력 x, y위치
1:nrow( UScrime ),                           # 문자로 출력할 값
cex = 0.8,                                   # 글자 크기
col = "black" )                              # 글자색
